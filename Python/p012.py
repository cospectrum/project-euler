"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from utils import factors_generator


def get_number_of_divisors(n: int) -> int:
    return sum(1 for factor in factors_generator(n))


def get_triangle_number_by(*, position: int) -> int:
    assert isinstance(position, int) and position > 0
    
    return (position*(position + 1)) // 2


def loop(*, start):
    while True:
        yield start
        start += 1


def get_triangle_num_with_divisors(*, over: int):
    assert over > 0
    
    for position in loop(start=1):
        triangle_num = get_triangle_number_by(position=position)
        divisors = get_number_of_divisors(triangle_num)
        
        if divisors > over:
            return triangle_num
    return


def main():
    n = 500
    answer = get_triangle_num_with_divisors(over=n)
    print(answer)


if __name__ == '__main__':
    main()

