/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four
million, find the sum of the even-valued terms.
*/

fn main() {
    let n = 4_000_000;
    let answer = sum_even_fib_numbers(n);

    println!("{answer}");
}

fn sum_even_fib_numbers(bound: u32) -> u32 {
    let mut iterator = fib_iterator();
    let mut sum: u32 = 0;

    let mut next;
    loop {
        next = iterator.next().unwrap();
        match next {
            _ if next > bound => return sum,
            _ if next % 2 == 0 => sum += next,
            _ => (),
        }
    }
}

fn fib_iterator() -> FibNumbers {
    FibNumbers {
        first: 0,
        second: 1,
    }
}

struct FibNumbers {
    first: u32,
    second: u32,
}

impl Iterator for FibNumbers {
    type Item = u32;

    fn next(&mut self) -> Option<u32> {
        let next = self.first + self.second;
        self.first = self.second;
        self.second = next;

        Some(next)
    }
}
